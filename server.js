const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const bodyParser = require('body-parser');
const TelegramBot = require('node-telegram-bot-api');
const session = require('express-session');
const MongoStore = require('connect-mongo');
require('dotenv').config({ path: './server.env' });

const app = express();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: false });

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
async function sendTelegramNotification(message) {
    try {
        const adminChatIds = process.env.ADMIN_CHAT_IDS.split(',');
        for (const chatId of adminChatIds) {
            await bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram:', error);
    }
}

// Middleware
app.use(cors({
    origin: ['http://127.0.0.1:5500', 'http://localhost:5500'],
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization', 'user-id', 'Accept']
}));
app.use(bodyParser.json());
app.use(express.static('.'));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–π
app.use(session({
    secret: process.env.SESSION_SECRET || 'your-secret-key',
    resave: false,
    saveUninitialized: false,
    store: MongoStore.create({
        mongoUrl: process.env.MONGODB_URI,
        ttl: 24 * 60 * 60 // 1 –¥–µ–Ω—å
    }),
    cookie: {
        secure: process.env.NODE_ENV === 'production',
        httpOnly: true,
        maxAge: 24 * 60 * 60 * 1000 // 1 –¥–µ–Ω—å
    }
}));

// MongoDB connection configuration
const mongoOptions = {
    useNewUrlParser: true,
    useUnifiedTopology: true,
    serverSelectionTimeoutMS: 5000,
    socketTimeoutMS: 45000,
    autoIndex: true
};

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose.connect(process.env.MONGODB_URI, mongoOptions)
    .then(() => {
        console.log('Connected to MongoDB successfully');
    })
    .catch((err) => {
        console.error('MongoDB connection error:', err);
    });

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ MongoDB
mongoose.connection.on('error', (err) => {
    console.error('MongoDB error:', err);
});

// –°—Ö–µ–º–∞ —Ç–æ–≤–∞—Ä–∞
const productSchema = new mongoose.Schema({
    name: { type: String, required: true },
    description: { type: String, required: true },
    price: { type: Number, required: true },
    image: { type: String, required: true },
    category: { type: String, required: true },
    slug: { type: String, required: true, unique: true },
    colors: [String],
    sizes: [String]
});

const Product = mongoose.model('Product', productSchema);

// User Schema
const userSchema = new mongoose.Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    fullname: { type: String, required: true },
    email: { type: String },
    phone: { type: String, required: true },
    address: { type: String, required: true },
    index: { type: String, required: true },
    orders: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Order' }]
}, {
    timestamps: true
});

const User = mongoose.model('User', userSchema);

// Order Schema
const orderSchema = new mongoose.Schema({
    product: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Product',
        required: true
    },
    quantity: {
        type: Number,
        required: true,
        default: 1
    },
    color: {
        type: String,
        required: true
    },
    size: {
        type: String,
        required: true
    },
    totalAmount: {
        type: Number,
        required: true
    },
    phoneNumber: {
        type: String,
        required: true
    },
    shippingAddress: {
        type: String,
        required: true
    },
    paymentMethod: {
        type: String,
        required: true
    },
    status: {
        type: String,
        enum: ['pending', 'processing', 'shipped', 'delivered', 'cancelled'],
        default: 'pending'
    },
    createdAt: {
        type: Date,
        default: Date.now
    }
});

const Order = mongoose.model('Order', orderSchema);

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const requireAuth = (req, res, next) => {
    if (req.session && req.session.userId) {
        next();
    } else {
        res.status(401).json({ message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });
    }
};

// Routes
app.get('/api/products', async (req, res) => {
    try {
        const products = await Product.find();
        res.json(products);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

// Auth Routes
app.post('/api/auth/register', async (req, res) => {
    try {
        const { username, password, fullname, phone, address, index } = req.body;

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if (!username || !password || !fullname || !phone || !address || !index) {
            return res.status(400).json({ message: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' });
        }

        if (username.length < 3) {
            return res.status(400).json({ message: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞' });
        }

        if (password.length < 6) {
            return res.status(400).json({ message: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤' });
        }

        if (!/^\d{6}$/.test(index)) {
            return res.status(400).json({ message: '–ò–Ω–¥–µ–∫—Å –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 6 —Ü–∏—Ñ—Ä' });
        }

        if (!/^\+?[\d\s-]{10,}$/.test(phone)) {
            return res.status(400).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞' });
        }

        const existingUser = await User.findOne({ username });
        if (existingUser) {
            return res.status(400).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
        }

        const user = new User({
            username,
            password,
            fullname,
            phone,
            address,
            index
        });

        await user.save();

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        const message = `
<b>üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è!</b>

üë§ <b>–§–ò–û:</b> ${fullname}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phone}
üìç <b>–ê–¥—Ä–µ—Å:</b> ${address}
üìÆ <b>–ò–Ω–¥–µ–∫—Å:</b> ${index}
üë§ <b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> ${username}
‚è∞ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> ${new Date().toLocaleString()}
        `;
        await sendTelegramNotification(message);

        res.status(201).json({ message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
    }
});

app.post('/api/auth/login', async (req, res) => {
    try {
        const { username, password } = req.body;

        if (!username || !password) {
            return res.status(400).json({ message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å' });
        }

        const user = await User.findOne({ username });
        if (!user) {
            return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
        }

        if (user.password !== password) {
            return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
        }

        // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        req.session.userId = user._id;
        req.session.username = user.username;

        res.json({
            message: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
            user: {
                id: user._id,
                username: user.username,
                fullname: user.fullname,
                phone: user.phone,
                address: user.address,
                index: user.index
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É' });
    }
});

app.post('/api/auth/logout', (req, res) => {
    req.session.destroy((err) => {
        if (err) {
            return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã' });
        }
        res.json({ message: '–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ' });
    });
});

app.get('/api/auth/check', (req, res) => {
    if (req.session && req.session.userId) {
        res.json({ authenticated: true, userId: req.session.userId });
    } else {
        res.json({ authenticated: false });
    }
});

// –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
app.get('/api/user/profile', requireAuth, async (req, res) => {
    try {
        const user = await User.findById(req.session.userId);
        if (!user) {
            return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        res.json({
            username: user.username,
            fullname: user.fullname,
            phone: user.phone,
            address: user.address,
            index: user.index
        });
    } catch (error) {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è' });
    }
});

// Order Routes
app.post('/api/orders', async (req, res) => {
    try {
        const { userId, items, totalAmount, shippingAddress, phoneNumber } = req.body;

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
        const order = new Order({
            user: userId,
            items: items.map(item => ({
                product: item.product,
                quantity: item.quantity,
                price: item.priceAtAdd
            })),
            totalAmount,
            shippingAddress,
            phoneNumber
        });

        await order.save();
        await order.populate('items.product');

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
        const orderItems = order.items.map(item => {
            const product = item.product;
            return `
üè∑ <b>${product.name}</b>
   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.quantity}
   ‚Ä¢ –¶–µ–Ω–∞: ${item.price} KZT
   ‚Ä¢ –¶–≤–µ—Ç: ${item.color}
   ‚Ä¢ –†–∞–∑–º–µ—Ä: ${item.size}`;
        }).join('\n\n');

        const message = `
üõç <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${order._id}</b>

üë§ <b>–î–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:</b>
   ‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: ${phoneNumber}
   ‚Ä¢ –ê–¥—Ä–µ—Å: ${shippingAddress}

üì¶ <b>–ó–∞–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:</b>
${orderItems}

üí∞ <b>–û–±—â–∞—è —Å—É–º–º–∞:</b> ${totalAmount} KZT

‚è∞ <b>–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:</b> ${new Date().toLocaleString('ru-RU')}`;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        await sendTelegramNotification(message);

        res.json(order);
    } catch (error) {
        console.error('Error creating order:', error);
        res.status(500).json({ message: error.message });
    }
});

app.put('/api/orders/:orderId/status', async (req, res) => {
    try {
        const { orderId } = req.params;
        const { status } = req.body;
        
        const order = await Order.findById(orderId);
        if (!order) {
            return res.status(404).json({ message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        order.status = status;
        await order.save();
        
        if (order.telegramChatId) {
            await sendOrderStatus(order.telegramChatId, orderId, status);
        }
        
        res.json(order);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:', error);
        res.status(400).json({ message: error.message });
    }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–∫–∞–∑–∞
app.post('/api/quick-order', async (req, res) => {
    try {
        const { productId, color, size, phoneNumber, shippingAddress, paymentMethod } = req.body;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
        if (!productId || !color || !size || !phoneNumber || !shippingAddress || !paymentMethod) {
            return res.status(400).json({ message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞' });
        }

        // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–¥—É–∫—Ç –ø–æ slug
        const product = await Product.findOne({ slug: productId });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
        if (!product) {
            return res.status(404).json({ message: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ü–≤–µ—Ç–∞ –∏ —Ä–∞–∑–º–µ—Ä–∞
        if (!product.colors.includes(color)) {
            return res.status(400).json({ message: '–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' });
        }
        if (!product.sizes.includes(size)) {
            return res.status(400).json({ message: '–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' });
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
        const order = new Order({
            product: product._id,
            quantity: 1,
            color,
            size,
            phoneNumber,
            shippingAddress,
            paymentMethod,
            totalAmount: product.price,
            status: 'pending'
        });

        await order.save();

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        const message = `
üõç –ù–æ–≤—ã–π –±—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑!

–¢–æ–≤–∞—Ä: ${product.name}
–¶–≤–µ—Ç: ${color}
–†–∞–∑–º–µ—Ä: ${size}
–¶–µ–Ω–∞: ${product.price} KZT

üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${phoneNumber}
üìç –ê–¥—Ä–µ—Å: ${shippingAddress}
üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ${paymentMethod}
        `;

        await sendTelegramNotification(message);

        res.status(201).json({ message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω', order });
    } catch (error) {
        console.error('Error creating quick order:', error);
        res.status(500).json({ 
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞',
            error: error.message 
        });
    }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
app.post('/api/register', async (req, res) => {
    try {
        const { username, email, password } = req.body;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ email –Ω–µ –ø—É—Å—Ç–æ–π
        if (!email) {
            return res.status(400).json({ message: 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = new User({
            username,
            email,
            password // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—å –Ω—É–∂–Ω–æ —Ö–µ—à–∏—Ä–æ–≤–∞—Ç—å
        });

        await user.save();
        res.json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        res.status(500).json({ message: error.message });
    }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
}); 